#ifndef LEVEL_H_INCLUDED
#define LEVEL_H_INCLUDED

/*
 * This file allows to include the level header generated by the is::Engine
 * level editor to be able to use them with the engine components
 */

// #include "../levels/level_1.h"
// ...

namespace is
{
//////////////////////////////////////////////////////
/// \brief Access the content which allows to manage
/// the integration of game levels
///
//////////////////////////////////////////////////////
namespace level
{
////////////////////////////////////////////////////////////
/// \brief Enum represents a array containing the level data
///
/// Allows to identify and load the corresponding level
/// array in GameLevel
////////////////////////////////////////////////////////////
enum LevelId
{
    LEVEL_1
    // ...

    ////////////////////////////////////////////////////////////
    // don't touch this. Add all level item before this one
    , LEVEL_MAX ///< Allows you to know the number of levels
    ////////////////////////////////////////////////////////////
};

////////////////////////////////////////////////////////////
/// \brief Returns the level array according to its index
///
/// It is used in @a GameLevelLoadResource() to determine the
/// level array that will be loaded to create the game level
////////////////////////////////////////////////////////////
inline short const* getLevelMap(int CURRENT_LEVEL)
{
    switch (CURRENT_LEVEL)
    {
        // case LEVEL_1 : return LEVEL_1_MAP; break;
        // ...
        default: return 0; break;
    }
}
}
}

#endif // LEVEL_H_INCLUDED
